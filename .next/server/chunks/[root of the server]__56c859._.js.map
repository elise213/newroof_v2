{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/mara/Desktop/projects/homesharing-next/src/app/api/checkout/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport Stripe from \"stripe\";\n\n// Load Stripe Secret Key from environment variables\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\nconst YOUR_DOMAIN = process.env.NEXT_PUBLIC_SITE_URL || \"http://localhost:3000\";\n\nexport async function POST(req) {\n  try {\n    console.log(\"Received request to /api/checkout\");\n\n    const { cart } = await req.json(); // Parse JSON request body\n    console.log(\"Cart data:\", cart);\n\n    if (!cart || !Array.isArray(cart) || cart.length === 0) {\n      return NextResponse.json(\n        { error: \"Cart must be a non-empty array\" },\n        { status: 400 }\n      );\n    }\n\n    // Convert cart items into Stripe's line item format\n    const lineItems = cart.map((item) => ({\n      price: item.stripePriceId, // Stripe price ID\n      quantity: 1, // Default to 1 per item\n    }));\n\n    // Create a Stripe Checkout Session\n    const session = await stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      line_items: lineItems,\n      mode: \"subscription\", // Ensure it matches your pricing model\n      phone_number_collection: { enabled: true },\n      success_url: `${YOUR_DOMAIN}/return?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `${YOUR_DOMAIN}/checkout`,\n    });\n\n    console.log(`Stripe session created: ${session.id}`);\n\n    return NextResponse.json({ sessionId: session.id });\n  } catch (error) {\n    console.error(\"Error creating checkout session:\", error);\n    return NextResponse.json({ error: error.message }, { status: 400 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;;;;;;;AAGA,oDAAoD;AACpD,MAAM,SAAS,IAAI,OAAO,QAAQ,GAAG,CAAC,iBAAiB;AACvD,MAAM,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;AAEjD,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI,IAAI,0BAA0B;QAC7D,QAAQ,GAAG,CAAC,cAAc;QAE1B,IAAI,CAAC,QAAQ,CAAC,MAAM,OAAO,CAAC,SAAS,KAAK,MAAM,KAAK,GAAG;YACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,oDAAoD;QACpD,MAAM,YAAY,KAAK,GAAG,CAAC,CAAC,OAAS,CAAC;gBACpC,OAAO,KAAK,aAAa;gBACzB,UAAU;YACZ,CAAC;QAED,mCAAmC;QACnC,MAAM,UAAU,MAAM,OAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;YACpD,sBAAsB;gBAAC;aAAO;YAC9B,YAAY;YACZ,MAAM;YACN,yBAAyB;gBAAE,SAAS;YAAK;YACzC,aAAa,GAAG,YAAY,wCAAwC,CAAC;YACrE,YAAY,GAAG,YAAY,SAAS,CAAC;QACvC;QAEA,QAAQ,GAAG,CAAC,CAAC,wBAAwB,EAAE,QAAQ,EAAE,EAAE;QAEnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,WAAW,QAAQ,EAAE;QAAC;IACnD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}